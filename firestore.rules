# create the rules text (single-quoted here-string prevents $(...) interpolation)
$rules = @'
 // Production Firestore rules â€” paste exactly as-is
 rules_version = '2';
 service cloud.firestore {
   match /databases/{database}/documents {

     // Users collection
     match /users/{userId} {
       allow read: if request.auth != null;

       allow update, create: if request.auth != null
         && request.auth.uid == userId
         && !(request.resource.data.keys().hasAny(['points','sub','adFree','subExpiry','lastDailyClaim']));

       match /activities/{activityId} {
         allow create: if request.auth != null && request.auth.uid == userId;
         allow read: if request.auth != null && request.auth.uid == userId;
         allow update, delete: if false;
       }
     }

     // Couples collection
     match /couples/{coupleId} {
       allow read: if request.auth != null;

       allow create: if request.auth != null
         && request.resource.data.memberA is string
         && request.resource.data.memberB is string
         && (request.resource.data.memberA == request.auth.uid || request.resource.data.memberB == request.auth.uid)
         && (request.resource.data.keys().hasAny(['memberA','memberB']) || request.resource.data.createdAt is timestamp);

       allow update, delete: if false;

       match /messages/{msgId} {
         allow create: if request.auth != null
           && (get(/databases/$(database)/documents/couples/$(coupleId)).data.memberA == request.auth.uid
             || get(/databases/$(database)/documents/couples/$(coupleId)).data.memberB == request.auth.uid)
           && request.resource.data.keys().hasAll(['sender','ciphertext','ts'])
           && request.resource.data.sender == request.auth.uid;

         allow read: if request.auth != null
           && (get(/databases/$(database)/documents/couples/$(coupleId)).data.memberA == request.auth.uid
             || get(/databases/$(database)/documents/couples/$(coupleId)).data.memberB == request.auth.uid);

         allow update, delete: if false;
       }
     }

     // Default deny
     match /{document=**} {
       allow read, write: if false;
     }
   }
 }
'@
